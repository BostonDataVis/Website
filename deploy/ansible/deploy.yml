# Clone the repo and check out the specified "commit" (defaults to master)
# unless it has already been checked out. Specifying "force" will clone and
# build regardless of prior status. When done, symlink the specified commit
# to make it go live, and remove old clones to free up disk space.

- hosts: all
  become: yes
  become_method: sudo
  tasks:
    - name: check if specified commit has already been deployed
      stat: path={{base_path}}/{{commit}} get_checksum=no get_md5=no
      register: commit_dir

    # Clone the repo, checking out the specified commit. If a canonical-sha-named
    # directory for that commit doesn't already exist, or if "force" is true,
    # clone the repo and build it.
    - block:
      - name: ensure pre-existing temp directory is removed
        file: path={{clone_path}} state=absent

      - name: clone git repo into temp directory
        git:
          repo: "{{synced_folder if local else git_repo}}"
          dest: "{{clone_path}}"
          version: "{{commit}}"

      - name: get sha of cloned repo
        command: git rev-parse HEAD
        args:
          chdir: "{{clone_path}}"
        register: sha
        changed_when: false

      - name: check if specified commit sha has already been deployed
        stat: path={{base_path}}/{{sha.stdout}} get_checksum=no get_md5=no
        register: sha_dir

      # All project build tasks go here. These tasks will only be run for the
      # specified commit if the commit hasn't been deployed before or if "force"
      # is true.
      - block:
        - name: compare package.json of current deploy with previous deploy
          command: diff {{site_path}}/package.json {{clone_path}}/package.json
          register: package_diff
          ignore_errors: true
          no_log: true

        - name: copy existing npm modules
          command: cp -R {{site_path}}/node_modules {{clone_path}}
          when: package_diff.rc == 0

        - name: install npm modules
          npm: path="{{clone_path}}"
          when: package_diff.rc != 0

        - name: copy secrets from secret server to destination
          delegate_to: localhost
          become: false
          shell: |
            ssh nest.bocoup.com "cat /mnt/secrets/{ses,meetup}" |
            ssh {{inventory_hostname}} "cat > ~{{ lookup('env', 'USER') }}/.env"

        - name: move secrets into place
          shell: mv ~{{ lookup('env', 'USER') }}/.env {{clone_path}}

        - name: build production version
          shell: npm run build
          args:
            chdir: "{{clone_path}}"

        when: force or not sha_dir.stat.exists

      - name: delete pre-existing sha-named directory
        file: path={{base_path}}/{{sha.stdout}} state=absent
        when: force and sha_dir.stat.exists

      - name: move cloned repo to sha-named directory
        command: mv {{clone_path}} {{base_path}}/{{sha.stdout}}
        when: force or not sha_dir.stat.exists

      - name: ensure just-created temp directory is removed
        file: path={{clone_path}} state=absent

      when: force or not commit_dir.stat.exists

    # Symlink new build and prune old clones
    - name: link sha-named clone to make it live
      file:
        path: "{{site_path}}"
        state: link
        src: "{{base_path}}/{{ sha.stdout | default(commit) }}"
        force: yes

    - name: update last-modification time of sha-named clone
      file: path={{base_path}}/{{ sha.stdout | default(commit) }} state=touch

    - name: remove old clones to free up disk space
      shell: |
        # Find all 40-char-SHA-named child directories and for each directory, print
        # out the last-modified timestamp and the SHA.
        find . -mindepth 1 -maxdepth 1 -type d \
        -regextype posix-extended -regex './[0-9a-f]{40}' -printf '%T@ %P\n' |
        # Sort numerically in ascending order (on the timestamp), remove the
        # timestamp from each line (leaving only the SHA), then remove the most
        # recent SHAs from the list (leaving only the old SHAs-to-be-removed).
        sort -n | cut -d ' ' -f 2 | head -n -{{keep_n_most_recent}} |
        # Remove each remaining SHA-named directory and echo the SHA (so the task
        # can display whether or not changes were made).
        xargs -I % sh -c 'rm -rf "$1"; echo "$1"' -- %
      register: remove_result
      changed_when: remove_result.stdout != ""
      args:
        chdir: "{{base_path}}"
      when: keep_n_most_recent is defined

    # post deploy tasks
    - name: ensure site is restarted
      service:
        name: site
        state: restarted
